#version 430

#define GRID_UNDEF 4294967295

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;



// Struct for atom
struct AtomStruct
{
    vec3 center;
    float radius;
    vec4 proteinID;
};



// SSBOs
layout(std430, binding = 0) buffer AtomsBuffer           { AtomStruct atoms[];};
layout(std430, binding = 1) buffer GridcellsBuffer       { uint gcell[];     };
layout(std430, binding = 2) buffer GridindicesBuffer     { uint gndx[];      };
layout(std430, binding = 3) buffer GridcountBuffer       { int  gridcnt[];   };
layout(std430, binding = 4) buffer GridoffsetBuffer      { int  gridoff[];   };
layout(std430, binding = 5) buffer GridBuffer            { uint grid[];      };
layout(std430, binding = 6) buffer UnsortedIndexBuffer   { uint undx[];      };
layout(std430, binding = 7) buffer SearchResultBuffer    { int  searchRes[]; };



uniform int     pnum;
uniform float   radius2; // radius^2
uniform ivec3   gridRes;
uniform int     gridAdjCnt;
uniform int     searchCellOff;
uniform int     gridAdj[216];



void checkIfAtomsAreInRadius(uint cell, vec3 position, int pID, inout int isInRadius)
{
    if (gridcnt[cell] != 0) {
        uint cfirst = gridoff[cell];
        uint clast  = cfirst + gridcnt[cell];

        // iterate over all atoms
        for (uint cndx = cfirst; cndx < clast; cndx++) {
            uint j = grid[cndx];

            // is atom j within search radius?
            AtomStruct atom2 = atoms[undx[j]];
            vec3 position2 = atom2.center;
            vec3 distance = position - position2;
            float d2 = (distance.x * distance.x) + (distance.y * distance.y) + (distance.z * distance.z);
            if (d2 < radius2) {

                // do both atoms belong to different proteins?
                int pID2 = int(atom2.proteinID.x);
                if (pID != pID2) {
                    isInRadius = 1;
                }
            }
        }
    }
}

void main() {
    // get element index
    uint i = gl_GlobalInvocationID.x;
    if (i >= pnum) return;

    // get cell for the corresponding atom
    uint icell = gcell[i];
    if (icell == GRID_UNDEF) return; // particle is outside the grid

    // important informations for the compare
    uint uidx       = undx[i];
    AtomStruct atom = atoms[uidx];
    vec3 position   = atom.center;
    int  pID        = int(atom.proteinID.x);

    /*
     * check for all adjacent grid cells within the search radius of this atom
     */
    int isInRadius = 0;
    uint startCell = icell - searchCellOff;
    for (int cellIdx = 0; cellIdx < gridAdjCnt; cellIdx++) {
        uint currentCell = startCell + gridAdj[cellIdx];
        checkIfAtomsAreInRadius(currentCell, position, pID, isInRadius);
    }

    // assign isInRadius to this field
    searchRes[uidx] = isInRadius;
}