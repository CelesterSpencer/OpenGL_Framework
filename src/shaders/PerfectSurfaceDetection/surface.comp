#version 430 core

// ## Workgroup layout (just linear of atoms)
layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

// ## Constant values
const int neighborsMaxCount = 10;

// ## Global variables

// All cutting faces, also those who gets cut away by others
int cuttingFaceCount = 0;
vec3 cuttingFaceCenters[neighborsMaxCount];
float cuttingFaceRadii[neighborsMaxCount];
vec3 cuttingFaceNormals[neighborsMaxCount];

// Selection of cutting faces which get intersected pairwaise and produce endpoints
int cuttingFaceIndicesCount = 0; // Count of not cut away cutting faces
int cuttingFaceIndicators[neighborsMaxCount]; // Indicator whether cutting face was cut away by other (1 == not cut away)
int cuttingFaceIndices[neighborsMaxCount]; // Indices of cutting faces which are not cut away by other

// ## Uniforms
uniform int atomCount;
uniform float probeRadius;

// ## Structs
struct AtomStruct
{
    vec3 center;
    float radius;
};

// ## SSBOs
layout(std430, binding = 0) readonly restrict buffer AtomBuffer
{
    AtomStruct atoms[];
};

// ## Atomic counter
layout(binding = 1) uniform atomic_uint atomicIndex;

// ## Image with output indices of surface atoms
layout(binding = 2, r32ui) restrict writeonly uniform uimageBuffer imageList;

// ## Intersection line of two planes
// http://stackoverflow.com/questions/6408670/line-of-intersection-between-two-planes
void intersectPlanes(
    vec3 faceCenter,
    vec3 faceNormal,
    vec3 otherFaceCenter,
    vec3 otherFaceNormal,
    inout vec3 linePoint,
    inout vec3 lineDir)
{
    // Direction of line
    lineDir = cross(faceNormal, otherFaceNormal);

    // No determinant necessary, because check for parallelity already done and normals are unit vectors

    // Point on line
    linePoint =
        (cross(lineDir, otherFaceNormal) * length(faceCenter)
        + (cross(faceNormal, lineDir) * length(otherFaceCenter)));
}

// ## Part under square root of intersection line and sphere
// https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
float underSQRT(vec3 linePoint, vec3 lineDir, vec3 atomCenter, float atomRadius)
{
    float underSQRT1 = dot(lineDir, (linePoint - atomCenter));
    underSQRT1 = underSQRT1 * underSQRT1;
    float underSQRT2 = length(linePoint - atomCenter);
    underSQRT2 = underSQRT2 * underSQRT2;
    return (underSQRT1 - underSQRT2 + (atomRadius * atomRadius));
}

// ## Function to test whether endpoint is NOT cut away. Called after cutting face list is minimized
bool testEndpoint(vec3 endpoint)
{
    // Just some reservation
    vec3 vector;

    // Iterate over cuttingFaceIndices entries
    for(int i = 0; i < cuttingFaceIndicesCount; i++)
    {
        // Index of cutting face
        int index = cuttingFaceIndices[i];

        // Vector from cutting face center to endpoint
        vector = endpoint - cuttingFaceCenters[index];

        // Dot product should have positive sign if in same half space
        if(dot(vector, cuttingFaceNormals[index]) > 0)
        {
            return false;
        }
    }
    return true;
}

// ## Main function
void main()
{
    // Index
    int atomIndex = int(gl_GlobalInvocationID.x);

    // Check whether in range
    if(atomIndex >= atomCount) { return; }

    // When no endpoint was generated at all, atom is surface (value is false then)
    bool endpointGenerated = false;

    // When one endpoint survives cutting, atom is surface (value is true then)
    bool endpointSurvivesCut = false;

    // ### OWN VALUES ###

    // Own extended radius
    float atomExtRadius = atoms[atomIndex].radius + probeRadius;

    // Own center
    vec3 atomCenter = atoms[atomIndex].center;

    // ### BUILD UP OF CUTTING FACE LIST ###

    // Go over other atoms and build cutting face list
    for(int i = 0; i < atomCount; i++)
    {
        // Do not cut with itself
        if(i == atomIndex) { continue; }

        // ### OTHER'S VALUES ###

        // Get values from other atom
        vec3 otherAtomCenter = atoms[i].center;
        float otherAtomExtRadius = atoms[i].radius + probeRadius;

        // ### INTERSECTION TEST ###

        // Vector from center to other's
        vec3 connection = otherAtomCenter - atomCenter;

        // Distance between atoms
        float atomDistance = length(connection);

        // Do they intersect with extended radii?
        if(atomDistance >= (atomExtRadius + otherAtomExtRadius)) { continue; }

        // NODE: Following cases are NOT considered
        // - both spheres touch each other in one point
        // - one sphere lies completely inside other
        // - one sphere lies completely inside other and touches other's surface in one point

        // ### INTERSECTION ###

        // Squared atom distance
        float atomDistanceSquared = atomDistance * atomDistance;

        // Calculate center of intersection
        // http://gamedev.stackexchange.com/questions/75756/sphere-sphere-intersection-and-circle-sphere-intersection
        float h =
            0.5
            + ((atomExtRadius * atomExtRadius)
            - (otherAtomExtRadius * otherAtomExtRadius))
            / atomDistanceSquared;

        // ### CUTTING FACE LIST ###

        // Use connection between centers as line
        cuttingFaceCenters[cuttingFaceCount] = atomCenter + h * connection;

        // Calculate radius of intersection
        cuttingFaceRadii[cuttingFaceCount] =
            sqrt((atomExtRadius * atomExtRadius)
            - h * h * atomDistanceSquared);

        // Calculate normal of intersection
        cuttingFaceNormals[cuttingFaceCount] = normalize(connection);

        // Initialize cutting face indicator with: 1 == was not cut away (yet)
        cuttingFaceIndicators[cuttingFaceCount] = 1;

        // Increment cutting face list index and break if max count of neighbors reached
        if((++cuttingFaceCount) == neighborsMaxCount) { break; }
    }

    // ### GET RID OF CUTTING FACES WHICH ARE COMPLETELY CUT AWAY BY OTHER ###

    for(int i = 0; i < cuttingFaceCount - 1; i++)
    {
        // Already cut away (think about where this is save to test)
        // if(cuttingFaceIndicators[i] == 0) { continue; }

        // Values of cutting face
        vec3 faceCenter = cuttingFaceCenters[i];
        float faceRadius = cuttingFaceRadii[i];
        vec3 faceNormal = cuttingFaceNormals[i];

        // Test every cutting face for intersection line with other
        for(int j = i+1; j < cuttingFaceCount; j++)
        {
            // Already cut away (think about where this is save to test)
            // if(cuttingFaceIndicators[j] == 0) { continue; }

            // Values of other cutting face
            vec3 otherFaceCenter = cuttingFaceCenters[j];
            float otherFaceRadius = cuttingFaceRadii[j];
            vec3 otherFaceNormal = cuttingFaceNormals[j];

            // ### CHECK THAT FACES TO NOT CUT EACH OTHER WITHIN ATOM ###

            // Check for parallelity, first
            bool notCutEachOther = (1.0 == abs(dot(faceNormal,otherFaceNormal))); // If already parallel, they do not cut

            // Do further testing if not already parallel
            if(!notCutEachOther)
            {
                // Intersection of planes, resulting in line
                vec3 lineDir; vec3 linePoint;
                intersectPlanes(
                    faceCenter,
                    faceNormal,
                    otherFaceCenter,
                    otherFaceNormal,
                    linePoint,
                    lineDir);

                // Intersection of line with sphere, resulting in two, one or no endpoints
                // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
                float valueUnderSQRT = underSQRT(linePoint, lineDir, atomCenter, atomExtRadius);

                // Only interesting case is for zero endpoints, because then there is no cut
                notCutEachOther = valueUnderSQRT < 0;
            }

            // ### CHECK WHETHER CUTTING FACE CAN BE FORGOT ###

            // Faces do not cut each other, so they produce not later endpoints. Check them now
            if(notCutEachOther)
            {
                // Connection between faces' center
                vec3 connection = otherFaceCenter - faceCenter;

                // Booleans for check
                bool faceConnectionPositive = dot(faceNormal, connection) > 0;
                bool otherFaceConnectionPositive = dot(otherFaceNormal, connection) > 0;

                // Atom is completely cut away by faces
                if(faceConnectionPositive && !otherFaceConnectionPositive)
                {
                    // No surface atom since cut away by the two cutting faces
                    return;
                }

                // Check for direction of normals
                if(dot(faceNormal, otherFaceNormal) > 0)
                {
                    if(!faceConnectionPositive && otherFaceConnectionPositive)
                    {
                        // Face is cut away by other face
                        cuttingFaceIndicators[i] = 0;

                    }
                    else if(faceConnectionPositive && !otherFaceConnectionPositive)
                    {
                        // Other face is cut away by face
                        cuttingFaceIndicators[j] = 0;
                    }
                }
            }
        }
    }

    // ### GO OVER CUTTING FACES AND COLLECT NOT CUT AWAY ONES ###

    for(int i = 0; i < cuttingFaceCount; i++)
    {
        // Check whether cutting face is still there after preprocessing
        if(cuttingFaceIndicators[i] == 1)
        {
            // Save index of that cutting face
            cuttingFaceIndices[cuttingFaceIndicesCount] = i;

            // Increase count of those cutting faces
            cuttingFaceIndicesCount++;
        }
    }

    // ### GO OVER OK CUTTING FACES AND TEST ENDPOINTS ###

    for(int i = 0; i < cuttingFaceIndicesCount; i++)
    {
        // Values of cutting face
        int index = cuttingFaceIndices[i];
        vec3 faceCenter = cuttingFaceCenters[index];
        float faceRadius = cuttingFaceRadii[index];
        vec3 faceNormal = cuttingFaceNormals[index];

        // Test every cutting face for intersection line with other
        for(int j = i+1; j < cuttingFaceIndicesCount; j++)
        {
            // Values of other cutting face
            int otherIndex = cuttingFaceIndices[j];
            vec3 otherFaceCenter = cuttingFaceCenters[otherIndex];
            float otherFaceRadius = cuttingFaceRadii[otherIndex];
            vec3 otherFaceNormal = cuttingFaceNormals[otherIndex];

            // Intersection of planes, resulting in line
            vec3 lineDir; vec3 linePoint;
            intersectPlanes(
                faceCenter,
                faceNormal,
                otherFaceCenter,
                otherFaceNormal,
                linePoint,
                lineDir);

            // Intersection of line with sphere, resulting in two, one or no endpoints
            // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
            float valueUnderSQRT = underSQRT(linePoint, lineDir, atomCenter, atomExtRadius);

            // Left part of equation
            float left = -(dot(lineDir, (linePoint - atomCenter)));

            // Check value under square root
            if(valueUnderSQRT > 0)
            {
                // Some endpoint was at least generated
                endpointGenerated = true;

                // Right part of equation
                float right = sqrt(valueUnderSQRT);

                // First endpoint
                float d = left + right;
                if(testEndpoint(linePoint + d * lineDir))
                {
                    // Break out of for loop (and outer)
                    endpointSurvivesCut = true;
                    break;
                }

                // Second endpoint
                d = left - right;
                if(testEndpoint(linePoint + d * lineDir))
                {
                    // Break out of for loop (and outer)
                    endpointSurvivesCut = true;
                    break;
                }
            }
            else if(valueUnderSQRT == 0)
            {
                // Some endpoint was at least generated
                endpointGenerated = true;

                // Just test the one endpoint
                float d = left;
                if(testEndpoint(linePoint + d * lineDir))
                {
                    // Break out of for loop (and outer)
                    endpointSurvivesCut = true;
                    break;
                }
            }
            // else, no endpoint is generated since cutting faces do not intersect
        }
    }

    // ### ATOM IS SURFACE ATOM ###

    // If no endpoint was generated at all or one or more survived cutting, add this atom to surface
    if(!endpointGenerated || endpointSurvivesCut)
    {
        // Increment atomic counter
        uint idx = atomicCounterIncrement(atomicIndex);

        // Save index of atom at index of atomic counter in image
        imageStore(imageList, int(idx), uvec4(gl_GlobalInvocationID.x));
    }
};
