#version 430 core

// Workgroup layout (just linear of atoms)
layout(local_size_x=8, local_size_y=1, local_size_z=1) in;

// Constant values
const int neighborsMaxCount = 10;

// Global variables
int cuttingFaceCount = 0;
vec3 cuttingFaceCenters[neighborsMaxCount];
float cuttingFaceRadii[neighborsMaxCount];
vec3 cuttingFaceNormals[neighborsMaxCount];

// Uniforms
uniform int atomCount;
uniform float probeRadius;

// Structs
struct AtomStruct
{
    vec3 center;
    float radius;
};

// SSBOs
layout(std430, binding = 0) readonly restrict buffer AtomBuffer
{
    AtomStruct atoms[];
};

// Atomic counter
layout(binding = 1) uniform atomic_uint index;

// Image with output indices of surface atoms
layout(binding = 2, r32ui) restrict writeonly uniform uimageBuffer list;

// Function to test whether endpoint is NOT cut away
bool testEndpoint(vec3 endpoint)
{
    vec3 vector;
    for(int c = 0; c < cuttingFaceCount; c++)
    {
        vector = endpoint - cuttingFaceCenters[c];
        if(dot(vector, cuttingFaceNormals[c]) > 0)
        {
            return false;
        }
    }
    return true;
}

// Main function
void main()
{
    // Index
    int atomIndex = int(gl_GlobalInvocationID.x);

    // Check whether in range
    if(atomIndex >= atomCount) { return; }

    // One endpoint which survices cutting tests is enough
    bool surfaceAtom = false;

    // ### OWN VALUES ###

    // Own extended radius
    float atomExtRadius = atoms[atomIndex].radius + probeRadius;

    // Own center
    vec3 atomCenter = atoms[atomIndex].center;

    // ### ITERATION OVER ALL OTHER ATOMS TO BUILD UP CUTTING FACE LIST ###

    // Go over other atoms and build cutting face list
    for(int a = 0; a < atomCount; a++)
    {
        // Do not cut with itself
        if(a == atomIndex) { continue; }

        // ### OTHER'S VALUES ###

        // Get values from other atom
        vec3 otherAtomCenter = atoms[a].center;
        float otherAtomExtRadius = atoms[a].radius + probeRadius;

        // ### INTERSECTION TEST ###

        // Vector from one center to other
        vec3 connection = otherAtomCenter - atomCenter;

        // Distance between atoms
        float atomDistance = length(connection);

        // Do they intersect with extended radii? (TODO: think about equal..just add endpoint directly?)
        if(atomDistance >= (atomExtRadius + otherAtomExtRadius)) { continue; }

        // ### INTERSECTION ###

        // Squared atom distance
        float atomDistanceSquared = atomDistance * atomDistance;

        // Calculate center of intersection
        // http://gamedev.stackexchange.com/questions/75756/sphere-sphere-intersection-and-circle-sphere-intersection
        float h =
            0.5
            + ((atomExtRadius * atomExtRadius)
            - (otherAtomExtRadius * otherAtomExtRadius))
            / atomDistanceSquared;

        // ### CUTTING FACE LIST ###

        // Use connection between centers as line
        cuttingFaceCenters[cuttingFaceCount] = atomCenter + h * connection;

        // Calculate radius of intersection
        cuttingFaceRadii[cuttingFaceCount] =
            sqrt((atomExtRadius * atomExtRadius)
            - h * h * atomDistanceSquared);

        // Calculate normal of intersection
        cuttingFaceNormals[cuttingFaceCount] = normalize(connection);

        // Increment cutting face list index and break if max count of neighbors reached
        if((++cuttingFaceCount) == neighborsMaxCount) { break; }
    }

    // ### CHECK OF ENDPOINTS OF CUTTING FACE INTERSECTION LINES ###

    for(int c = 0; c < cuttingFaceCount - 1; c++)
    {
        // Values of cutting face
        vec3 faceCenter = cuttingFaceCenters[c];
        float faceRadius = cuttingFaceRadii[c];
        vec3 faceNormal = cuttingFaceNormals[c];

        // Test every cutting face for intersection line with other
        for(int d = c+1; d < cuttingFaceCount; d++)
        {
            // Values of other cutting face
            vec3 otherFaceCenter = cuttingFaceCenters[d];
            float otherFaceRadius = cuttingFaceRadii[d];
            vec3 otherFaceNormal = cuttingFaceNormals[d];

            // Check for parallelity (just not handle it :D)
            if(faceNormal == otherFaceNormal) { continue; }

            // Intersection of planes, resulting in line
            // http://stackoverflow.com/questions/6408670/line-of-intersection-between-two-planes

            // Direction of line
            vec3 lineDir = cross(faceNormal, otherFaceNormal);

            // No determinant necessary, because check for parallelity already done and normals are unit vectors

            // Point on line
            vec3 linePoint =
                (cross(lineDir, otherFaceNormal) * length(faceCenter)
                + (cross(faceNormal, lineDir) * length(otherFaceCenter)));

            // Intersection of line with sphere, resulting in two, one or no endpoints
            // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection

            // Calculate the part under the square root
            float underSQRT1 = dot(lineDir, (linePoint - atomCenter));
            underSQRT1 = underSQRT1 * underSQRT1;
            float underSQRT2 = length(linePoint - atomCenter);
            underSQRT2 = underSQRT2 * underSQRT2;
            float underSQRT = underSQRT1 - underSQRT2 + (atomExtRadius * atomExtRadius);

            // Left part of equation
            float left = -(dot(lineDir, (linePoint - atomCenter)));

            // Check value under square root
            if(underSQRT > 0)
            {
                // Right part of equation
                float right = sqrt(underSQRT);

                // First endpoint
                float d = left + right;
                if(testEndpoint(linePoint + d * lineDir))
                {
                    // Break out of for loop (and outer)
                    surfaceAtom = true;
                    break;
                }

                // Second endpoint
                d = left - right;
                if(testEndpoint(linePoint + d * lineDir))
                {
                    // Break out of for loop (and outer)
                    surfaceAtom = true;
                    break;
                }
            }
            else if(underSQRT == 0)
            {
                // Just test the one endpoint
                float d = left;
                if(testEndpoint(linePoint + d * lineDir))
                {
                    // Break out of for loop (and outer)
                    surfaceAtom = true;
                    break;
                }
            }
        }
    }

    // ### ATOM IS SURFACE ATOM ###

    // When there was no cut it is also a surface atom
    if(surfaceAtom || cuttingFaceCount == 0)
    {
        // Increment atomic counter
        uint idx = atomicCounterIncrement(index);

        // Save index of atom at index of atomic counter in image
        imageStore(list, int(idx), uvec4(gl_GlobalInvocationID.x));
    }
};
